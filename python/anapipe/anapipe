#!/usr/bin/python
# -*- coding: utf-8 -*-
# https://github.com/IMMORTALxJO/training/tree/master/python/anapipe

from threading import Thread
import os
import re
import sys
import time

OPTS={
 'version':'v2',
 'patterns': [],    # patterns list
 'lines_count': 10, # lines per pattern
 'flush': False, # clear logs after every screen 
 'refresh_time': 1, # refresh time in seconds
 'colour': False,
 'status': 'monitor'
}

class sorted_dict:

  max_len = [ 0, 0 ]
  def __init__( self, size=10 ):
    self.sort_size = size
    self.flush()

  def add( self, key ):
    if key in self.MAP:
      self.MAP[ key ] += 1
    else:
      self.MAP[ key ] = 1
      self.keys_counter += 1

    if self.MAP[ key ] >= self.lowest:
      self.dirty[ key ] = 1
    self.weight += 1

  def up_key( self, key ):
    weight = self.MAP[ key ]
    if weight<self.lowest:
      return
    id = 0
    if key in self.sorted_map:
      self.sorted.pop( self.sorted_map[ key ] )
      del self.sorted_map[ key ]
    while id<len(self.sorted) and weight>=self.sorted[ id ][ 0 ]:
      id += 1
    self.sorted.insert( id, ( weight, key ) )
    self.sorted = self.sorted[-self.sort_size:]
    self.sorted_map = {}
    i = 0
    for w, k in self.sorted:
      self.sorted_map[ k ] = i
      i += 1
    if len(self.sorted) == self.sort_size:
      self.lowest = self.sorted[0][0]

  def up_dirty( self ):
    dirty = self.dirty.keys()
    self.dirty = {}
    for key in dirty:
      self.up_key( key )
    for weight, key in self.sorted:
      if len(str(weight))>sorted_dict.max_len[0]:
        sorted_dict.max_len[0] = len(str(weight))
      if len(key)>sorted_dict.max_len[1]:
        sorted_dict.max_len[1] = len(key)

  def get( self ):
    self.up_dirty()
    r = []
    for weight, key in self.sorted:
      r.append( ( weight, key ) )
    r.reverse()
    return r

  def flush( self ):
    self.sorted = []
    self.sorted_map = {}
    self.dirty = {}
    self.MAP = {}
    self.lowest = 0
    self.keys_counter = 0
    self.weight = 0


def reader(  OPTS, MAP ):
  patterns = OPTS[ 'patterns' ]
  for line in sys.stdin:
    _splited = line[:-1].split(' ')
    for key, name in patterns:
      try:
        MAP[ key ].add( key.format( a=_splited ) )
      except:
        continue
  OPTS['status'] = 'ended'


def monitor( OPTS, MAP ):
  def show():
    _MAP = {}
    _UNIQ = {}
    _WEIGHT = {}
    for key, name in OPTS[ 'patterns' ]:
      _MAP[ name ] = MAP[ key ].get()
      _UNIQ[ name ] = MAP[ key ].keys_counter
      _WEIGHT[ name ] = MAP[ key ].weight

    BOX_SIZE = sorted_dict.max_len[0]+sorted_dict.max_len[1]+6
    if BOX_SIZE < 15:
      BOX_SIZE = 15
    if BOX_SIZE > 100:
      BOX_SIZE = 100
    os.system( [ 'clear', 'cls' ][ os.name == 'nt' ] )

    print '┌─ ANAPIPE %s %s┐' % ( OPTS['version'], '─'*( BOX_SIZE-13-len( OPTS['version'] ) ) )
    for key in _MAP:
      print '├── %s %s┤' % ( key, '─'*( BOX_SIZE-6-len( key ) )) 
      print '│  Keys : %s │' % str(_UNIQ[ key ]).ljust( BOX_SIZE-12 )
      print '│  Reqs : %s │' % str(_WEIGHT[ key ]).ljust( BOX_SIZE-12 )
      print '├%s┤' % ( '─'*(BOX_SIZE-2) )
      if len(_MAP[ key ])==0:
        continue
      length = str(len(str(_MAP[ key ][0][0])))
      for count, touch_name in _MAP[ key ]:
        to_print = ( '%-'+length+'d %s' ) % ( count, touch_name )
        if len(to_print)> BOX_SIZE-5:
          to_print = to_print[:BOX_SIZE-8]+'...'
        if OPTS[ 'colour' ] and count > OPTS[ 'colour' ]:
          print '│  \033[91m%s\033[0m │' % to_print.ljust( BOX_SIZE-5 )
        else:
          print '│  %s │' % to_print.ljust( BOX_SIZE-5 )
        
    print '└%s┘' % ( '─'*(BOX_SIZE-2) )
    if OPTS['flush']:
      for pattern in MAP:
        MAP[ pattern ].flush()

  mili = OPTS[ 'refresh_time' ]*1000
  now_mili = 0

  while OPTS['status'] == 'monitor':
    time.sleep( 0.1 )
    now_mili += 100
    if now_mili >= mili:
      show()
      now_mili = 0
  show()
  sys.exit(0)
  


sys.argv.pop(0)
while len(sys.argv)>0:
  arg = sys.argv.pop(0)
  if arg == '-n' or arg == '--number':
    OPTS['lines_count'] = int(sys.argv.pop(0))
    continue
  if arg == '-f' or arg == '--flush':
    OPTS['flush'] = True
    continue
  if arg == '-i' or arg == '--interval':
    OPTS['refresh_time'] = float(sys.argv.pop(0))
    continue
  if arg == '-c' or arg == '--colour':
    OPTS['colour'] = float(sys.argv.pop(0))
    continue

  if arg=='?' or arg=='-h' or arg=='--help': # print help
    print ' -f   | --flush       : statistics will reset after each display (default FALSE)'
    print ' -s N | --sleep N     : update statistics every N seconds (default 1)'
    print ' -i N | --interval N  : show the first N positions (default 10)'
    print ' -h   | --help | ?    : print this help'
    print ' -c   | --colour      : set min counter valuer for colourfull keys'
    sys.exit(0)

  arr = re.findall( '(\d+|\D+)', arg )
  pattern = ''
  for el in arr:
    if re.match( '\D', el ):
      pattern += el
    else:
      pattern += '{a[%s]}' % el
  OPTS['patterns'].append( ( pattern, arg ) )

if len(OPTS['patterns'])==0:
  OPTS[ 'patterns' ] = [ ( '{a[0]}', '0' ) ]

MAP = {}
for key, name in OPTS[ 'patterns' ]:
  MAP[ key ] = sorted_dict( OPTS['lines_count'] )

reader_thread = Thread(target=reader, args=( OPTS, MAP ) )
reader_thread.start()

try:
  monitor( OPTS, MAP )
except KeyboardInterrupt:
  sys.exit( 0 )
